version: "3.9"

networks:
  proxy:
    driver: bridge

volumes:
  postgres_data:
  n8n_data:
  traefik_letsencrypt:

services:
  traefik:
    image: traefik:v3.1
    container_name: traefik
    restart: unless-stopped
    command:
      - --api.dashboard=false
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      # Redirect :80 -> :443
      - --entrypoints.web.http.redirections.entryPoint.to=websecure
      - --entrypoints.web.http.redirections.entryPoint.scheme=https
      # Let's Encrypt (HTTP challenge)
      - --certificatesresolvers.le.acme.email=${TRAEFIK_ACME_EMAIL}
      - --certificatesresolvers.le.acme.storage=/letsencrypt/acme.json
      - --certificatesresolvers.le.acme.httpchallenge=true
      - --certificatesresolvers.le.acme.httpchallenge.entrypoint=web
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - traefik_letsencrypt:/letsencrypt
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      - TZ=${TZ}
    networks:
      - proxy

  postgres:
    image: postgres:15-alpine
    container_name: n8n_postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      TZ: ${TZ}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - proxy

  n8n:
    image: n8nio/n8n:1.77.0
    container_name: n8n_app
    restart: unless-stopped
    environment:
      # --- Core URL config for public HTTPS behind Traefik ---
      N8N_HOST: ${N8N_HOST}
      N8N_PROTOCOL: https
      N8N_PORT: 5678
      WEBHOOK_URL: https://${N8N_HOST}/
      # --- Timezone ---
      GENERIC_TIMEZONE: ${TZ}
      TZ: ${TZ}
      # --- Auth hardening (UI Basic Auth) ---
      N8N_BASIC_AUTH_ACTIVE: "true"
      N8N_BASIC_AUTH_USER: ${N8N_BASIC_AUTH_USER}
      N8N_BASIC_AUTH_PASSWORD: ${N8N_BASIC_AUTH_PASSWORD}
      # --- Encryption key (protects credentials at rest) ---
      N8N_ENCRYPTION_KEY: ${N8N_ENCRYPTION_KEY}
      # --- DB connection ---
      DB_TYPE: postgres
      DB_POSTGRESDB_HOST: postgres
      DB_POSTGRESDB_PORT: 5432
      DB_POSTGRESDB_DATABASE: ${POSTGRES_DB}
      DB_POSTGRESDB_USER: ${POSTGRES_USER}
      DB_POSTGRESDB_PASSWORD: ${POSTGRES_PASSWORD}
      # --- Executions & data retention (tune to taste) ---
      EXECUTIONS_PROCESS: main
      EXECUTIONS_DATA_SAVE_ON_ERROR: all
      EXECUTIONS_DATA_SAVE_ON_SUCCESS: none
      EXECUTIONS_DATA_SAVE_MANUAL_EXECUTIONS: true
      EXECUTIONS_DATA_PRUNE: true
      EXECUTIONS_DATA_MAX_AGE: 168   # hours (7 days)
    depends_on:
      - postgres
      - traefik
    volumes:
      - n8n_data:/home/node/.n8n
    labels:
      - traefik.enable=true
      - traefik.http.routers.n8n.rule=Host(`${N8N_HOST}`)
      - traefik.http.routers.n8n.entrypoints=websecure
      - traefik.http.routers.n8n.tls.certresolver=le
      - traefik.http.services.n8n.loadbalancer.server.port=5678
    networks:
      - proxy

  # ---- Nightly Postgres backups to ./backups/postgres ----
  pg_backup:
    image: prodrigestivill/postgres-backup-local:16
    container_name: n8n_pg_backup
    restart: unless-stopped
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      SCHEDULE: "0 18 * * *"   # Every day 18:00 local time
      BACKUP_KEEP_DAYS: "7"
      BACKUP_KEEP_WEEKS: "4"
      BACKUP_KEEP_MONTHS: "3"
      TZ: ${TZ}
    volumes:
      - ./backups/postgres:/backups
    depends_on:
      - postgres
    networks:
      - proxy

  # ---- Nightly tarball of the n8n_data volume to ./backups/n8n ----
  n8n_data_backup:
    image: alpine:3.20
    container_name: n8n_data_backup
    restart: unless-stopped
    command: >
      sh -c '
      mkdir -p /backups &&
      echo "0 18 * * * tar -czf /backups/n8n-data-$(date +\%Y\%m\%d-\%H\%M).tar.gz -C /data ."
        > /etc/crontabs/root &&
      crond -f -L /dev/stdout
      '
    environment:
      - TZ=${TZ}
    volumes:
      - n8n_data:/data:ro
      - ./backups/n8n:/backups
    depends_on:
      - n8n
    networks:
      - proxy
